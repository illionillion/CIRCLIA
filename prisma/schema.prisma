generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator erd {
    provider = "prisma-erd-generator"
    output   = "./ERD.md"
}

model User {
    id             String   @id @default(uuid()) // Primary key
    studentNumber  String // Student number as a string
    name           String // User's name
    email          String   @unique // Email, set as unique
    password       String // Hashed password (for credentials login)
    createdAt      DateTime @default(now()) // Creation timestamp
    updatedAt      DateTime @updatedAt // Updated timestamp
    iconImagePath  String? // Optional: Icon image URL or base64 string
    profileText    String? // Optional: Markdown profile text
    instructorFlag Boolean  @default(false) // Indicates if the user is an instructor

    accounts           Account[] // One-to-many relationship with Account (for OAuth)
    CircleMember       CircleMember[]
    CircleInstructor   CircleInstructor[] // New relation for instructors
    MembershipRequests MembershipRequest[] // ユーザーが送信したメンバーシップリクエスト
    ProcessedRequests  MembershipRequest[] @relation("ProcessedBy") // 管理者として処理したリクエスト

    @@index([email]) // Optional: Index on email
}

model Account {
    id                String  @id @default(uuid()) // Primary key
    userId            String // Foreign key to User
    provider          String // Provider name (e.g., "google", "github", "credentials")
    providerAccountId String // Provider's unique account ID for this user
    refresh_token     String? // Optional: OAuth refresh token
    access_token      String? // Optional: OAuth access token
    expires_at        Int? // Optional: OAuth token expiration timestamp
    token_type        String? // Optional: OAuth token type
    scope             String? // Optional: OAuth token scope
    id_token          String? // Optional: OAuth ID token for OpenID Connect
    session_state     String? // Optional: OAuth session state

    user User @relation(fields: [userId], references: [id]) // Relation to User

    @@unique([provider, providerAccountId]) // Ensures unique account per provider
    @@index([userId]) // Index on userId for fast lookup
}

model Circle {
    id                String              @id @default(uuid()) // Primary key, UUID形式
    name              String // Circle name
    description       String // Circle description
    location          String // Activity location
    createdAt         DateTime            @default(now()) // Creation timestamp
    updatedAt         DateTime            @updatedAt // Updated timestamp
    deletedAt         DateTime? // Optional: Deletion timestamp for soft deletes
    imagePath         String? // Optional: Circle image URL or base64 string
    activityDay       String? // 活動日
    CircleMember      CircleMember[]
    CircleInstructor  CircleInstructor[] // New relation for instructors
    CircleTag         CircleTag[]
    MembershipRequest MembershipRequest[]

    @@index([name]) // Optional: Index on circle name for fast lookup
}

model CircleMember {
    id        Int       @id @default(autoincrement())
    userId    String // 外部キー (User テーブルへの参照)
    circleId  String // 外部キー (Circle テーブルへの参照)
    joinDate  DateTime  @default(now()) // 加入日
    leaveDate DateTime? // 退会日 (論理削除用)
    roleId    Int // 外部キー (Role テーブルへの参照)

    user   User   @relation(fields: [userId], references: [id])
    circle Circle @relation(fields: [circleId], references: [id])
    role   Role   @relation(fields: [roleId], references: [id])
}

model MembershipRequest {
    id           String    @id @default(uuid()) // プライマリキー
    circleId     String // Circle テーブルへの外部キー
    userId       String // User テーブルへの外部キー
    requestType  String // 'join'（入会申請）または 'withdrawal'（退会申請）
    status       String // 'pending'（保留中）, 'approved'（承認済み）, 'rejected'（拒否済み）
    requestDate  DateTime  @default(now()) // 申請日
    resolvedDate DateTime? // 承認/拒否された日
    processedBy  String? // 処理した管理者のuserId（nullの場合はまだ未処理）

    user   User   @relation(fields: [userId], references: [id]) // User テーブルとのリレーション
    circle Circle @relation(fields: [circleId], references: [id]) // Circle テーブルとのリレーション
    admin  User?  @relation("ProcessedBy", fields: [processedBy], references: [id]) // 管理者ユーザーとのリレーション（null可）
}

model CircleInstructor {
    id       Int    @id @default(autoincrement()) // Unique ID for each instructor record
    userId   String // Foreign key to User
    circleId String // Foreign key to Circle

    user   User   @relation(fields: [userId], references: [id])
    circle Circle @relation(fields: [circleId], references: [id])
}

model CircleTag {
    id       String @id @default(uuid()) // Primary key
    tagName  String // タグ名
    circleId String // 外部キー (Circle テーブルへの参照)

    circle Circle @relation(fields: [circleId], references: [id]) // サークルとのリレーション

    @@index([circleId]) // Optional: Index on circleId for fast lookup
}

model Role {
    id       Int    @id @default(autoincrement())
    roleName String // ロール名 (例: 代表、副代表)

    members CircleMember[] // 1対多のリレーション (ロールに関連するメンバー)
}
